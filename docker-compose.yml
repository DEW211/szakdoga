version: '3.7'

services:
  reverse-proxy:
    image: traefik:v2.4
    command: --api.insecure=true --providers.docker --log.level=DEBUG
    ports:
      - "80:80"
      - "8081:8080"
    networks:
      - auth
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock

  frontend:
    image: frontend
    ports:
      - '3000:80'
    build:
      context: ./frontend
      dockerfile: Dockerfile
    networks:
      - auth
      - rabbit
    labels: 
      - "traefik.enable=true"
      - "traefik.http.routers.frontend.rule=PathPrefix(`/`)"

  catalog:
    image: catalog
    build:
      context: ./Identity
      dockerfile: Catalog/Dockerfile
    ports:
      - 5000:80
    networks:
      - auth
      - rabbit
    depends_on:
      - db
      - rabbitmq
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.catalog.rule=PathPrefix(`/api/Catalog`)"
      

  basket:
    image: basket
    build:
      context: ./Identity
      dockerfile: Basket/Dockerfile
    ports:
      - "6001:80"
    networks:
      - auth
      - rabbit
    depends_on:
      - db
      - rabbitmq
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.basket.rule=PathPrefix(`/api/Basket`)"
      - "traefik.http.middlewares.basket-auth.forwardauth.address=http://Identity/api/Identity/secured"
      - "traefik.http.middlewares.basket-auth.forwardauth.authResponseHeaders=email"
      - "traefik.http.routers.basket.middlewares=basket-auth"
     


  ordering:
    image: ordering
    build:
      context: ./Identity
      dockerfile: Ordering/Dockerfile
    ports:
      - 7001:80
    networks:
      - auth
      - rabbit
    depends_on:
      - db
      - rabbitmq
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.ordering.rule=PathPrefix(`/api/Ordering`)"
      - "traefik.http.middlewares.ordering-auth.forwardauth.address=http://Identity/api/Identity/secured"
      - "traefik.http.middlewares.ordering-auth.forwardauth.authResponseHeaders=email"
      - "traefik.http.routers.ordering.middlewares=ordering-auth"
     
  identity:
    image: identity
    build:
      context: ./Identity
      dockerfile: Identity/Dockerfile
    ports:
      - 8000:80
    networks:
      - auth
      - rabbit
    depends_on:
      - db
      - rabbitmq
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.identity-rule.rule=PathPrefix(`/api/Identity`)"
    
    
  
  
  db:
    image: postgres
    restart: always
    ports:
      - 5432:5432
    environment:
      POSTGRES_PASSWORD: example
    networks:
      - rabbit
    volumes:
      - db-volume:/var/lib/postgresql/data

  adminer:
    image: adminer
    restart: always
    ports:
      - 8090:8080
    depends_on:
      - db
    networks:
      - rabbit

  rabbitmq:
    image: "rabbitmq:3.8.3-management-alpine"
    ports:
      - "5672:5672"
      - "15672:15672"
    container_name: rabbitmq
    hostname: rabbitmq
    networks:
      - rabbit

networks:
  auth:
  rabbit:
    driver: bridge

volumes:
  db-volume:
    driver: local
  
